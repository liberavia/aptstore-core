#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
import os
import argparse

LAUNCH_PATH = os.path.dirname(os.path.realpath(__file__))

if os.path.isdir(os.path.join(LAUNCH_PATH, "../aptstore_core")):
    sys.dont_write_bytecode = True
    SOURCE_PATH = os.path.normpath(os.path.join(LAUNCH_PATH, '..'))
    sys.path.insert(0, SOURCE_PATH)

import aptstore_core.platforms as platforms
available_platforms_list = platforms.get_available_platforms()
available_actions_list = platforms.get_available_actions()
available_platforms = ', '.join(
    f'"{p}"' for p in available_platforms_list)
available_actions = ', '.join(
    f'"{a}"' for a in available_actions_list)

parser = argparse.ArgumentParser(
    description='Install/Remove apps from different sources.'
)

parser.add_argument(
    'platform',
    help='Allowed values are ' + available_platforms + '.'
)
parser.add_argument(
    'action',
    help='Allowed values are ' + available_actions + '.'
)
parser.add_argument(
    '-i', '--ident',
    help='Identifier for an related app-identification depending on platform.'
)
parser.add_argument(
    '-l', '--login',
    help='Optional login (depends on platform)'
)
parser.add_argument(
    '-s', '--secret',
    help='Optional password (depends on platform)'
)
parser.add_argument(
    '-g', '--gui',
    help='Optional flag that indicates GUI-Mode'
)

args = parser.parse_args()

platform = args.platform
action = args.action
ident = args.ident
login = args.login
password = args.secret
gui = args.gui


from aptstore_core.aptstore_core import AptStoreCore
print("Platform: " + platform)
print("Action: " + action)
aptstore = AptStoreCore(platform, action)
if ident:
    aptstore.set_ident(ident)
if login:
    aptstore.set_login(login)
if password:
    aptstore.set_password(password)

# get options
aptstore.trigger_action()
